{"version":3,"sources":["components/customHeader.js","components/customFooter.js","components/fileUploadInput.js","utilities/utilities.js","core/fileUpload.js","components/list.js","core/fileDownload.js","containers/mainContent.js","App.js","reportWebVitals.js","index.js"],"names":["CustomHeader","borderWidth","borderColor","padding","minHeight","CustomFooter","FileUploadInput","props","hidden","type","multiple","accept","onClick","clicked","onChange","changed","ref","inputRef","MIME_TYPES","txt","FileUpload","uploadRef","useRef","Fragment","variant","onPress","current","click","value","e","convertedFilesArray","target","files","forEach","x","index","file","convertTo","callback","reader","FileReader","addEventListener","result","readAsArrayBuffer","readAsBinaryString","readAsDataURL","convertFile","convertedFile","push","id","name","length","setUploadedFiles","List","width","aria-label","ariaLabel","items","selectionMode","onSelectionChange","i","FileDownload","uploadedFiles","find","d","base64string","filename","byteCharacters","atob","byteNumbers","Array","charCodeAt","byteArray","Uint8Array","extension","substr","lastIndexOf","blob","Blob","a","document","createElement","url","window","URL","createObjectURL","style","display","href","download","body","appendChild","revokeObjectURL","removeChild","downloadBase64","includes","split","MainContent","useState","App","theme","defaultTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c4c91ba3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Header, View } from '@adobe/react-spectrum';\r\n\r\nconst CustomHeader = () => {\r\n    return <View\r\n        borderWidth=\"thin\"\r\n        borderColor=\"dark\"\r\n        padding=\"size-250\">\r\n        <Header minHeight=\"size-1200\">File upload and download</Header>\r\n    </View>\r\n}\r\n\r\nexport default CustomHeader;","import React from 'react';\r\nimport { Footer, View } from '@adobe/react-spectrum';\r\n\r\nconst CustomFooter = () => {\r\n    return <View\r\n        borderWidth=\"thin\"\r\n        borderColor=\"dark\"\r\n        padding=\"size-250\">\r\n        <Footer minHeight=\"size-1000\">&copy; 2021, All rights reserved. </Footer>\r\n    </View>\r\n}\r\n\r\nexport default CustomFooter;","import React from 'react';\r\n\r\nconst FileUploadInput = props => {\r\n    return <input\r\n        hidden\r\n        type=\"file\"\r\n        multiple={props.multiple}\r\n        accept={props.accept}\r\n        onClick={props.clicked}\r\n        onChange={props.changed}\r\n        ref={props.inputRef} />\r\n}\r\n\r\nexport default FileUploadInput;","export const convertFile = (file, convertTo, callback) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('load', () => callback(reader.result));\r\n\r\n    switch (convertTo) {\r\n        case 'arrayBuffer':\r\n            reader.readAsArrayBuffer(file);\r\n            break;\r\n        case 'text':\r\n            reader.readAsBinaryString(file);\r\n            break;\r\n        case 'base64':\r\n            reader.readAsDataURL(file);\r\n            break;\r\n        default:\r\n            reader.readAsDataURL(file)\r\n\r\n    }\r\n}\r\n\r\n\r\nconst MIME_TYPES = {\r\n    txt: 'text/plain'\r\n}\r\n\r\nexport const downloadBase64 = (base64string, filename) => {\r\n    const byteCharacters = atob(base64string);\r\n    const byteNumbers = new Array(byteCharacters.length);\r\n    for(let i=0; i<byteCharacters.length; i++){\r\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n    }\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    const extension = filename.substr(filename.lastIndexOf('.') + 1);\r\n    const blob = new Blob([byteArray], {type: MIME_TYPES[extension]})\r\n\r\n    const a = document.createElement('a');\r\n    const url = window.URL.createObjectURL(blob);\r\n    a.style.display=\"none\";\r\n    a.href=url;\r\n    a.download=filename;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n    document.body.removeChild(a);\r\n}","import React, { useRef } from 'react';\r\nimport { Button } from '@adobe/react-spectrum';\r\nimport FileUploadInput from '../components/fileUploadInput';\r\nimport { convertFile } from '../utilities/utilities';\r\n\r\n\r\nconst FileUpload = props => {\r\n\r\n    const uploadRef = useRef();\r\n    const uploadBtnClickHandler = () => {\r\n        uploadRef.current.click()\r\n    }\r\n\r\n    const fileBrowsedHandler = (e) => {\r\n        const convertedFilesArray = [];\r\n        [...e.target.files].forEach((x, index) => {\r\n          convertFile(x, 'base64', (convertedFile) => {\r\n            convertedFilesArray.push({\r\n              id:  index+1,\r\n              name: x.name,\r\n              file: convertedFile\r\n            })\r\n    \r\n            if (convertedFilesArray.length === e.target.files.length) {\r\n              props.setUploadedFiles(convertedFilesArray)\r\n            }\r\n          })\r\n        })\r\n      }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button variant=\"cta\" onPress={() => uploadBtnClickHandler()}>Upload Files</Button>\r\n            <FileUploadInput\r\n                multiple={true}\r\n                accept=\".txt\"\r\n                clicked={() => uploadRef.current.value = ''}\r\n                changed={fileBrowsedHandler}\r\n                inputRef={uploadRef} />\r\n        </React.Fragment>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default FileUpload","import React from 'react';\r\nimport { ListBox, Item } from '@adobe/react-spectrum';\r\n\r\nconst List = props => {\r\n    return <ListBox\r\n        width={props.width}\r\n        aria-label={props.ariaLabel}\r\n        items={props.items}\r\n        selectionMode={props.selectionMode}\r\n        onSelectionChange={props.changed}>\r\n        {(file, i) => <Item key={i}>{file.name}</Item>}\r\n    </ListBox>\r\n\r\n}\r\n\r\nexport default List","import React from 'react';\r\nimport List from '../components/list';\r\nimport { downloadBase64 } from '../utilities/utilities';\r\n\r\nconst FileDownload = props => {\r\n\r\n    const listItemSelectedHandler = (e) => {\r\n        for (const x of e) {\r\n            const file = props.uploadedFiles.find(d => d.id === x);\r\n            const base64 = file.file.includes('data') ? file.file.split(',')[1] : file.file;\r\n            downloadBase64(base64, file.name);\r\n        }\r\n    }\r\n\r\n    return <List\r\n        width=\"size-2400\"\r\n        ariaLabel=\"Files\"\r\n        items={props.uploadedFiles}\r\n        selectionMode=\"single\"\r\n        changed={listItemSelectedHandler}>\r\n    </List>\r\n}\r\n\r\nexport default FileDownload","import React, { useState } from 'react';\r\nimport { Content, View } from '@adobe/react-spectrum';\r\n\r\nimport FileUpload from '../core/fileUpload';\r\nimport FileDownload from '../core/fileDownload';\r\n\r\nconst MainContent = () => {\r\n\r\n    \r\n  const [uploadedFiles, setUploadedFiles] = useState([]);\r\n\r\n    return <View\r\n        minHeight=\"size-6000\"\r\n        padding=\"size-250\">\r\n        <Content>\r\n            <FileUpload setUploadedFiles={setUploadedFiles} />\r\n            <FileDownload uploadedFiles={uploadedFiles} />\r\n        </Content>\r\n    </View>\r\n}\r\n\r\nexport default MainContent","import { Provider, defaultTheme} from '@adobe/react-spectrum';\n\nimport CustomHeader from './components/customHeader';\nimport CustomFooter from './components/customFooter';\nimport MainContent from './containers/mainContent';\n\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <Provider theme={defaultTheme}>\n      <CustomHeader />\n      <MainContent />\n      <CustomFooter />\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}